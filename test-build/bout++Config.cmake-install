

include(CMakeFindDependencyMacro)

set(BOUT_USE_SIGNAL ON)
set(BOUT_USE_COLOR ON)
set(BOUT_USE_TRACK ON)
set(BOUT_USE_SIGFPE OFF)
set(BOUT_USE_BACKTRACE ON)
set(BOUT_USE_OPENMP OFF)
set(BOUT_HAS_CUDA OFF)
set(BOUT_HAS_OUTPUT_DEBUG )
set(BOUT_CHECK_LEVEL 2)
set(BOUT_USE_METRIC_3D OFF)

set(BOUT_HAS_PVODE ON)
set(BOUT_HAS_NETCDF ON)
set(BOUT_HAS_FFTW ON)
set(BOUT_HAS_LAPACK OFF)
set(BOUT_HAS_PETSC OFF)
set(BOUT_HAS_SLEPC OFF)
set(BOUT_HAS_SCOREP OFF)
set(BOUT_USE_UUID_SYSTEM_GENERATOR FALSE)
set(BOUT_HAS_SUNDIALS OFF)
set(BOUT_HAS_HYPRE OFF)
set(BOUT_HAS_GETTEXT OFF)
set(BOUT_HAS_UMPIRE OFF)
set(BOUT_HAS_RAJA OFF)


list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

if(NOT "TRUE")
  # Enables the use of the build directory directly, without having to
  # specify the paths for the external packages as well
  if(EXISTS "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/fmt")
    list(APPEND CMAKE_PREFIX_PATH "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/fmt")
  endif()
  if(EXISTS "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/mpark.variant")
    list(APPEND CMAKE_PREFIX_PATH "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/mpark.variant")
  endif()
  if(EXISTS "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/PVODE")
    list(APPEND CMAKE_PREFIX_PATH "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/PVODE")
  endif()

  # If using the build directory directly, we need the CMake modules too
  if(EXISTS "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/BOUT-dev/cmake")
    list(APPEND CMAKE_MODULE_PATH "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/BOUT-dev/cmake")
  endif()
else()
  if(EXISTS "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/")
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/ ")
    list(APPEND CMAKE_MODULE_PATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
  endif()
endif()

include(BOUT++functions)

if(EXISTS "")
  set(PETSC_DIR "")
endif()
if(EXISTS "")
  set(SLEPC_DIR "")
endif()
if(EXISTS "")
  set(SUNDIALS_ROOT "")
elseif(EXISTS "")
  list(APPEND CMAKE_PREFIX_PATH "")
endif()
if(EXISTS "")
  set(HYPRE_ROOT "")
endif()
if(EXISTS "")
  set(FFTW_ROOT "")
endif()
if(EXISTS "")
  set(LAPACK_ROOT "")
endif()
if(EXISTS "")
  set(ScoreP_ROOT "")
endif()
if(EXISTS "")
  set(netCDF_ROOT "")
elseif(EXISTS "")
  set(NC_CONFIG "")
endif()
if(EXISTS "")
  set(netCDFCxx_ROOT "")
elseif(EXISTS "/usr/bin/ncxx4-config")
  set(NCXX4_CONFIG "/usr/bin/ncxx4-config")
elseif(EXISTS "")
  # If we downloaded netCDF-cxx4, then we need to add its build directory to our search paths
  list(APPEND CMAKE_PREFIX_PATH "")  
endif()
if(EXISTS "")
  set(PVODE_ROOT "")
elseif(EXISTS "")
    set(PVODE_DIR "")
elseif(EXISTS "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/PVODE")
    set(PVODE_DIR "/mnt/c/Users/enlan/University/York/Dissertation/Repositories/Dissertation_Project/test-build/externalpackages/PVODE")
endif()
if(EXISTS "")
  set(Libuuid_ROOT "")
endif()

if(OFF)
  set(mpark_variant_ROOT "")
else()
  # mpark.variant doesn't use GNUInstallDirs, always installs to lib
  set(mpark_variant_ROOT "${CMAKE_CURRENT_LIST_DIR}/../../../lib/cmake/mpark_variant")
endif()

if(OFF)
  set(fmt_ROOT "")
endif()

set(MPIEXEC_EXECUTABLE /usr/bin/mpiexec)
find_dependency(MPI 3.1 EXACT)

if (BOUT_USE_OPENMP)
  find_dependency(OpenMP)
endif()
if (BOUT_HAS_NETCDF)
  find_dependency(netCDF 4.8.1)
  find_dependency(netCDFCxx 4.3.1)
endif()
if (BOUT_HAS_PVODE)
  find_dependency(PVODE )
endif()
if (BOUT_HAS_FFTW)
  find_dependency(FFTW )
endif()
if (BOUT_HAS_LAPACK)
  find_dependency(LAPACK )
endif()
if (BOUT_HAS_PETSC)
  find_dependency(PETSc )
endif()
if (BOUT_HAS_SUNDIALS)
  find_dependency(SUNDIALS )
endif()
if (BOUT_HAS_HYPRE)
  find_dependency(HYPRE  EXACT)
endif()
if (BOUT_HAS_GETTEXT)
  find_dependency(Gettext )
  find_dependency(Intl )
endif()
find_dependency(mpark_variant )
find_dependency(fmt )
if (BOUT_HAS_SLEPC)
  find_dependency(SLEPc )
endif()
if (BOUT_HAS_SCOREP)
  find_dependency(ScoreP)
endif()
if (BOUT_USE_UUID_SYSTEM_GENERATOR)
 find_dependency(Libuuid)
endif()

include("${CMAKE_CURRENT_LIST_DIR}/bout++Targets.cmake")
